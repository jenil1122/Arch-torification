#!/bin/bash

RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m'

c_check_tor() {
    echo ""

    if command -v tor >/dev/null 2>&1; then
        echo -e "${GREEN}tor is installed.${NC}"
    else
        echo -e "${RED}Tor Is Not Installed${NC}"
        return 1
    fi

    return 0
}

c_check_iptables() {
    echo ""

    if command -v iptables >/dev/null 2>&1; then
        echo -e "${GREEN}iptables is installed.${NC}"
    else
        echo -e "${RED}Iptables Is Not Installed${NC}"
        return 1
    fi

    return 0
}

c_check_torrc() {
    local file="/etc/tor/torrc"
    local errors=0

    echo "Checking /etc/tor/torrc for required settings..."

    if [ ! -f "$file" ]; then
        echo -e "${RED}Error: Torrc file not found.${NC}"
        return 1
    fi

    if grep -q '^SOCKSPort 9050' "$file"; then
        echo -e "${GREEN}SOCKSPort 9050 is correctly set.${NC}"
    else
        errors=$((errors + 1))
    fi

    if grep -q '^DNSPort 5353' "$file"; then
        echo -e "${GREEN}DNSPort 5353 is correctly set.${NC}"
    else
        errors=$((errors + 1))
    fi

    if grep -q '^TransPort 9040' "$file"; then
        echo -e "${GREEN}TransPort 9040 is correctly set.${NC}"
    else
        errors=$((errors + 1))
    fi

    if [ $errors -eq 0 ]; then
        echo -e "${GREEN}All required settings are correctly set in /etc/tor/torrc.${NC}"
        return 0
    else
        return 1
    fi
}

c_check_iptables_config() {
    local folder="/etc/iptables"
    local file1="$folder/iptables.rules"
    local file2="$folder/ip6tables.rules"
    local expected_content="*nat
:PREROUTING ACCEPT [6:2126]
:INPUT ACCEPT [0:0]
:OUTPUT ACCEPT [17:6239]
:POSTROUTING ACCEPT [6:408]

-A PREROUTING ! -i lo -p udp -m udp --dport 53 -j REDIRECT --to-ports 5353
-A PREROUTING ! -i lo -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -j REDIRECT --to-ports 9040
-A OUTPUT -o lo -j RETURN
--ipv4 -A OUTPUT -d 192.168.0.0/16 -j RETURN
-A OUTPUT -m owner --uid-owner \"tor\" -j RETURN
-A OUTPUT -p udp -m udp --dport 53 -j REDIRECT --to-ports 5353
-A OUTPUT -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -j REDIRECT --to-ports 9040
COMMIT

*filter
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT DROP [0:0]

-A INPUT -i lo -j ACCEPT
-A INPUT -p icmp -j ACCEPT
-A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
--ipv4 -A INPUT -p tcp -j REJECT --reject-with tcp-reset
--ipv4 -A INPUT -p udp -j REJECT --reject-with icmp-port-unreachable
--ipv4 -A INPUT -j REJECT --reject-with icmp-proto-unreachable
--ipv6 -A INPUT -j REJECT
--ipv4 -A OUTPUT -d 127.0.0.0/8 -j ACCEPT
--ipv4 -A OUTPUT -d 192.168.0.0/16 -j ACCEPT
--ipv6 -A OUTPUT -d ::1/8 -j ACCEPT
-A OUTPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
-A OUTPUT -m owner --uid-owner \"tor\" -j ACCEPT
--ipv4 -A OUTPUT -j REJECT --reject-with icmp-port-unreachable
--ipv6 -A OUTPUT -j REJECT
COMMIT"

    echo "Checking if iptables.rules and ip6tables.rules exist in $folder and have the expected content..."

    if [ ! -f "$file1" ]; then
        echo "Error: $file1 does not exist."
        return 1
    fi

    if [ ! -f "$file2" ]; then
        echo "Error: $file2 does not exist."
        return 1
    fi

    local content1
    content1=$(<"$file1")

    local content2
    content2=$(<"$file2")

    if [ "$content1" != "$expected_content" ]; then
        echo -e "${RED}Some required settings are missing, RUN SETUP FIRST!${NC}"
        return 1
    fi

    if [ "$content2" != "$expected_content" ]; then
        echo -e "${RED}Some required settings are missing, RUN SETUP FIRST!${NC}"
        return 1
    fi

    echo -e "${GREEN}Both $file1 and $file2 have the expected content.${NC}"
    return 0
}

display_help() {
    echo "Usage: $0 [option]"
    echo ""
    echo "Options:"
    echo ""
    echo "  --setup       Required To Do only Once"
    echo "  --start-tor   Start Tor and related services"
    echo "  --stop-tor    Stop Tor and related services"
    echo "  --status      Check status of Tor and related services"
    echo "  --help        Display this help message"
    echo
}

c_start_services() {
    echo -e "${GREEN}Starting Tor services...${NC}"
    sudo systemctl start tor.service

    echo -e "${GREEN}Starting iptables service...${NC}"
    sudo systemctl start iptables.service

    echo -e "${GREEN}Starting ip6tables service...${NC}"
    sudo systemctl start ip6tables.service

    echo -e "${GREEN}Services started successfully.${NC}"
}

c_stop_services() {
    echo -e "${GREEN}Stopping Tor service...${NC}"
    sudo systemctl stop tor.service

    echo -e "${GREEN}Stopping iptables service...${NC}"
    sudo systemctl stop iptables.service

    echo -e "${GREEN}Stopping ip6tables service...${NC}"
    sudo systemctl stop ip6tables.service

    echo -e "${GREEN}Services stopped successfully.${NC}"
}

c_status_services() {
    echo ""
    if systemctl is-active --quiet tor.service; then
        echo -e "${GREEN}Tor service is running.${NC}"
    else
        echo -e "${RED}Tor service is not running.${NC}"
    fi

    echo ""

    if systemctl is-active --quiet iptables.service; then
        echo -e "${GREEN}iptables service is running.${NC}"
    else
        echo -e "${RED}iptables service is not running.${NC}"
    fi

    echo ""

    if systemctl is-active --quiet ip6tables.service; then
        echo -e "${GREEN}ip6tables service is running.${NC}"
    else
        echo -e "${RED}ip6tables service is not running.${NC}"
    fi
}

c_network_restart() {
    echo "Restarting network service..."

    if systemctl is-active --quiet NetworkManager; then
        echo "NetworkManager is active. Restarting NetworkManager..."
        if systemctl restart NetworkManager; then
            echo "NetworkManager restarted successfully."
        else
            echo "Failed to restart NetworkManager."
            return 1
        fi
    elif systemctl is-active --quiet systemd-networkd; then
        echo "systemd-networkd is active. Restarting systemd-networkd..."
        if systemctl restart systemd-networkd; then
            echo "systemd-networkd restarted successfully."
        else
            echo "Failed to restart systemd-networkd."
            return 1
        fi
    elif systemctl is-active --quiet netctl; then
        echo "netctl is active. Restarting netctl..."
        if systemctl restart netctl; then
            echo "netctl restarted successfully."
        else
            echo "Failed to restart netctl."
            return 1
        fi
    elif systemctl is-active --quiet iwd; then
        echo "iwd is active. Restarting iwd..."
        if systemctl restart iwd; then
            echo "iwd restarted successfully."
        else
            echo "Failed to restart iwd."
            return 1
        fi
    elif systemctl is-active --quiet connman; then
        echo "connman is active. Restarting connman..."
        if systemctl restart connman; then
            echo "connman restarted successfully."
        else
            echo "Failed to restart connman."
            return 1
        fi
    elif systemctl is-active --quiet iwcd; then
        echo "iwcd is active. Restarting iwcd..."
        if systemctl restart iwcd; then
            echo "iwcd restarted successfully."
        else
            echo "Failed to restart iwcd."
            return 1
        fi
    else
        echo "No supported network service is active."
        return 1
    fi

    return 0
}

c_setup() {
    if ! c_check_tor; then
        echo "Installing tor..."
        sudo pacman -S tor || {
            echo "Failed to install tor. Please try again."
            exit 1
        }
    fi

    if ! c_check_iptables; then
        echo "Installing iptables..."
        sudo pacman -S iptables || {
            echo "Failed to install iptables. Please try again."
            exit 1
        }
    fi
    
    if ! c_check_torrc; then
        echo -e "${RED}Error: /etc/tor/torrc not found.${NC}"
        echo "Reinstalling Tor..."
        sudo pacman -S tor

        if command -v tor >/dev/null 2>&1; then
            echo "Tor reinstalled successfully. Updating permissions of /etc/tor/torrc..."
            sudo chmod 644 /etc/tor/torrc
            echo "Permissions updated for /etc/tor/torrc."
        else
            echo -e "${RED}Error: Tor reinstallation failed.${NC}"
            exit 1
        fi
    fi

    echo -e "${GREEN}Setting up Tor System Wide...${NC}"
    
    if [ -d "/etc/iptables.old" ]; then
        echo -e "${GREEN}Removing existing /etc/iptables.old folder...${NC}"
        sudo rm -rf /etc/iptables.old
    fi

    if [ -d "/etc/iptables" ]; then
        echo -e "${GREEN}Backing up existing /etc/iptables folder...${NC}"
        sudo mv /etc/iptables /etc/iptables.old
    fi

    sudo mkdir -p /etc/iptables
    
    sudo touch /etc/iptables/iptables.rules
    sudo touch /etc/iptables/ip6tables.rules
    sudo tee /etc/iptables/iptables.rules /etc/iptables/ip6tables.rules > /dev/null <<EOF
*nat
:PREROUTING ACCEPT [6:2126]
:INPUT ACCEPT [0:0]
:OUTPUT ACCEPT [17:6239]
:POSTROUTING ACCEPT [6:408]

-A PREROUTING ! -i lo -p udp -m udp --dport 53 -j REDIRECT --to-ports 5353
-A PREROUTING ! -i lo -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -j REDIRECT --to-ports 9040
-A OUTPUT -o lo -j RETURN
--ipv4 -A OUTPUT -d 192.168.0.0/16 -j RETURN
-A OUTPUT -m owner --uid-owner "tor" -j RETURN
-A OUTPUT -p udp -m udp --dport 53 -j REDIRECT --to-ports 5353
-A OUTPUT -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -j REDIRECT --to-ports 9040
COMMIT

*filter
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT DROP [0:0]

-A INPUT -i lo -j ACCEPT
-A INPUT -p icmp -j ACCEPT
-A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
--ipv4 -A INPUT -p tcp -j REJECT --reject-with tcp-reset
--ipv4 -A INPUT -p udp -j REJECT --reject-with icmp-port-unreachable
--ipv4 -A INPUT -j REJECT --reject-with icmp-proto-unreachable
--ipv6 -A INPUT -j REJECT
--ipv4 -A OUTPUT -d 127.0.0.0/8 -j ACCEPT
--ipv4 -A OUTPUT -d 192.168.0.0/16 -j ACCEPT
--ipv6 -A OUTPUT -d ::1/8 -j ACCEPT
-A OUTPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
-A OUTPUT -m owner --uid-owner "tor" -j ACCEPT
--ipv4 -A OUTPUT -j REJECT --reject-with icmp-port-unreachable
--ipv6 -A OUTPUT -j REJECT
COMMIT
EOF

    sudo sed -i 's/:OUTPUT -d 127.0.0.0\/8 -j ACCEPT/:OUTPUT -d 127.0.0.0\/128 -j ACCEPT\n-A OUTPUT -d ::1\/128 -j ACCEPT\n-A OUTPUT -d fe80::\/10 -j ACCEPT/' /etc/iptables/ip6tables.rules

    echo -e "${GREEN}Files iptables.rules and ip6tables.rules have been created and modified in /etc/iptables directory.${NC}"

    sudo sed -i '/^\s*#.*SOCKSPort 9050/s/^#//' /etc/tor/torrc
    sudo sed -i '/^\s*#.*DNSPort 5353/s/^#//' /etc/tor/torrc
    sudo sed -i '/^\s*#.*TransPort 9040/s/^#//' /etc/tor/torrc

    if ! grep -q "SOCKSPort 9050" /etc/tor/torrc; then
        echo "" | sudo tee -a /etc/tor/torrc > /dev/null
        echo "SOCKSPort 9050" | sudo tee -a /etc/tor/torrc > /dev/null
    fi

    if ! grep -q "DNSPort 5353" /etc/tor/torrc; then
        echo "DNSPort 5353" | sudo tee -a /etc/tor/torrc > /dev/null
    fi

    if ! grep -q "TransPort 9040" /etc/tor/torrc; then
        echo "TransPort 9040" | sudo tee -a /etc/tor/torrc > /dev/null
    fi

    echo -e "${GREEN}Configuration added to /etc/tor/torrc file.${NC}"
    echo -e "${GREEN}Done and Dusted..${NC}"   
    echo ""
}

exit_gracefully() {
    echo -e "${GREEN}Exiting...${NC}"
    exit 0
}

gui() {
    clear

    RED='\033[0;31m'
    GREEN='\033[0;32m'
    NC='\033[0m' # No Color
    

    trap exit_gracefully SIGINT

    echo ""
    echo -e "${GREEN}Welcome!${NC}"
    echo "Following packages will be installed if not yet installed:"
    echo
    echo "1. Tor"
    echo "2. iptables"
    echo
    read -rp "Press 'y' to continue or 'n' to exit: " a

    if [ "$a" != "y" ]; then
        exit_gracefully
    fi

    if ! c_check_tor; then
        echo "Installing tor..."
        sudo pacman -S tor || {
            echo "Failed to install tor. Please try again."
            exit 1
        }
    fi

    if ! c_check_iptables; then
        echo "Installing iptables..."
        sudo pacman -S iptables || {
            echo "Failed to install iptables. Please try again."
            exit 1
        }
    fi

    sleep 0.6
    clear

    while true; do
        echo -e "${GREEN}Welcome!${NC}"

        echo
        echo "Options:"
        echo "1. Setup [DO IT, If you haven't already!]"
        echo "2. Start Tor System Wide"
        echo "3. Stop Tor System Wide"
        echo "4. Status"
        echo "5. Exit"

        read -rp "Enter your choice: " choice

        case $choice in
            1)
                c_setup
                sleep 0.6
                clear
                ;;
            2)
                echo -e "${GREEN}Checking Tor configuration...${NC}"
                if c_check_tor && c_check_iptables && c_check_torrc && c_check_iptables_config; then
                    echo -e "${GREEN}All checks passed. Starting Tor services...${NC}"
                    c_start_services
                else
                    echo -e "${RED}Error: Tor configuration check failed. Cannot start Tor services.${NC}"
                fi
                sleep 0.6
                clear
                ;;
            3)
                echo -e "${GREEN}Checking Tor configuration...${NC}"
                if c_check_tor && c_check_iptables && c_check_torrc && c_check_iptables_config; then
                    echo -e "${GREEN}All checks passed. Stopping Tor services...${NC}"
                    c_stop_services
                else
                    echo -e "${RED}Error: Tor configuration check failed. Cannot stop Tor services.${NC}"
                fi
                sleep 0.6
                clear
                ;;
            4)
                c_status_services
                sleep 1
                clear
                ;;
            5)
                exit_gracefully
                ;;
            *)
                echo "Invalid choice. Please select a valid option."
                ;;
        esac
    done
}

handle_options() {
    case "$1" in
        "--setup")
            c_setup
            ;;
        "--start-tor")
            echo -e "${GREEN}Checking Tor configuration...${NC}"
            if c_check_tor && c_check_iptables && c_check_torrc && c_check_iptables_config; then
                echo -e "${GREEN}All checks passed. Starting Tor services...${NC}"
                c_start_services
            else
                echo -e "${RED}Some required settings are missing, RUN SETUP FIRST!${NC}"
            fi
            ;;
        "--stop-tor")
            echo -e "${GREEN}Checking Tor configuration...${NC}"
            if c_check_tor && c_check_iptables && c_check_torrc && c_check_iptables_config; then
                echo -e "${GREEN}All checks passed. Stopping Tor services...${NC}"
                c_stop_services
            else
                echo -e "${RED}Some required settings are missing, RUN SETUP FIRST!${NC}"
            fi
            ;;
        "--status")
            c_status_services
            ;;
        "--help" | "-h" | "-" | "--")
            display_help
            ;;
        *)
            echo "Invalid option. Use '--help' for usage instructions."
            exit 1
            ;;
    esac
}

if [ "$#" -eq 0 ]; then
    gui
else
    handle_options "$1"
fi
